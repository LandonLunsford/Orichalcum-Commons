ITweener
	function tween(target:Object, property:String, progress:Number):void;

ITweenerPlugin extends ITweener
	function get property():String;
	function init(target:Object, params:*):void;
	
	
	AutoAlphaPlugin extends NumberTweener implements ITweenerPlugin
	{
		
		/* INTERFACE orichalcum.animation.tweener.ITweenerPlugin */

		public  get property():String
		{
			return 'alpha';
		}
		
		public function init(target:Object, value:*):void
		{
			super(target, value);
		}
		
		/* INTERFACE orichalcum.animation.tweener.ITweener */
		
		public function tween(target:Object, property:String, progress:Number):void
		{
			super(target, property, progress);
			
			if (target is DisplayObject)
				target.visibile = target.alpha < 0.01;
		}
	}

...
Tween.install(AutoAlphaPlugin)
...





///////////////////////////////// ignore some of that and view below


tween API

>	play
||	pause 
|| & >	toggle 
[]	stop 
|<< + >	replay
|<<	start | reset | gotoStart | skipToStart 
>>|	end | gotoEnd | skipToEnd 
?	goto | skipTo | seek | gotoAndStop + gotoAndPlay
?	reverse
?	playBackward

setPosition --> goto

	play():void // pssibly has event when on zero and no delay
	pause():void
	toggle():void // forwards to play therefore possibly has event to supress
	stop():void
	replay():void // pssibly has event when no delay
	goto(position:Number, supressCallbacks:Boolean = false):void
	gotoStart(position:Number, supressCallbacks:Boolean = false):void // stop inferred
	gotoEnd(position:Number, supressCallbacks:Boolean = false):void // stop inferred
	gotoAndPlay(position:Number, supressCallbacks:Boolean = false):void
	gotoAndStop(position:Number, supressCallbacks:Boolean = false):void
	reverse():void
	playBackwards():void // not necessary == gotoAndS

	
	
	
	for (var propertyName:String in to)
	{
		const tweener:ITweener = _tweeners[propertyName] ||= createTweener(target, propertyName, target[propertyName]);
	
		// no longer necessary with delegate tweeners
		//if (!(propertyName in target))
			//delete ....
	}
	
	function createTweener(target:Object, propertyName:String, propertyValue:*):ITweener
	{
		const tweener:ITweener = _tweenersByProperty[propertyName];
		return tweener
			? new tweener
			: new _tweenersByClass[getQualifiedClassName(propertyValue)];
	}
	
	_tweenersByProperty:Object = {};
	_tweenersByClass:Object = {'Number': NumberTweener, 'Boolean': BooleanTweener};
	
	/**
	 * this implementation only allows one tweener per property
	 */
	function install(tweener:ITweener, triggers:*):void
	{
		if (tweener == null)
		{
			throw new ArgumentError('Argument "tweener" passed to method "install" of class "orichalcum.animation.Tween" must not be null.');
		}
		else if (triggers is String)
		{
			_tweenersByProperty[triggers] = tweener;
		}
		else if (triggers is Class)
		{
			_tweenersByClass[getQualifiedClassName(triggers)] = tweener;
		}
		else if (triggers is Array || triggers is Vector.<String>)
		{
			for each(var trigger:String in triggers)
				install(tweener, trigger);
		}
		else
		{
			throw new ArgumentError('Argument "tweener" passed to method "install" of class "orichalcum.animation.Tween" must be one of the following types: String, Class, Array, Vector.<String>, Vector.<Class>.');
		}
	}
	
	
	
	
	
	make optional matcher function ? fn(target, property, parameters):Boolean
	
	install(AdditiveNumberTweener, ['x','y','z']);
	install(AutoHideTweener, ['alpha'], function(target:Object):Boolean { return target is DisplayObject; });
	install(ColorTransformTweener, ['tint', 'color', 'colorTransform'], function(target:Object, property:String, parameters:Object):Boolean{ return target is DisplayObject; });
	
	
	
